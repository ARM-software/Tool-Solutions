 *******************************************************************************
 Copyright 2024 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/src/cpu/aarch64/matmul/acl_matmul.cpp b/src/cpu/aarch64/matmul/acl_matmul.cpp
index ca1c7eb47..12c0aefd7 100644
--- a/src/cpu/aarch64/matmul/acl_matmul.cpp
+++ b/src/cpu/aarch64/matmul/acl_matmul.cpp
@@ -31,7 +31,6 @@ status_t acl_matmul_t::execute_forward(const exec_ctx_t &ctx) const {
     auto wei_base = CTX_IN_MEM(const data_t *, DNNL_ARG_WEIGHTS);

     bool is_transA = pd()->amp_.is_transA;
-    bool use_dst_acc = pd()->amp_.use_dst_acc;

     std::lock_guard<std::mutex> _lock {this->mtx};
     auto *acl_resource = ctx.get_resource_mapper()->get<acl_resource_t>(this);
@@ -51,14 +50,8 @@ status_t acl_matmul_t::execute_forward(const exec_ctx_t &ctx) const {
                 const_cast<data_t *>(wei_base));
     }

-    if (use_dst_acc) {
-        // Put the result in a new tensor, it will be accumulated to the dst
-        // during the post ops
-        acl_obj.dst_tensor.allocator()->allocate();
-    } else {
-        auto dst_base = CTX_OUT_MEM(data_t *, DNNL_ARG_DST);
-        acl_obj.dst_tensor.allocator()->import_memory(dst_base);
-    }
+    auto dst_base = CTX_OUT_MEM(data_t *, DNNL_ARG_DST);
+    acl_obj.dst_tensor.allocator()->import_memory(dst_base);

     acl_obj.gemm.run();

diff --git a/src/cpu/aarch64/matmul/acl_matmul.hpp b/src/cpu/aarch64/matmul/acl_matmul.hpp
index 6d848abe5..ed6eaca85 100644
--- a/src/cpu/aarch64/matmul/acl_matmul.hpp
+++ b/src/cpu/aarch64/matmul/acl_matmul.hpp
@@ -90,9 +90,15 @@ struct acl_matmul_t : public primitive_t {
                     amp_, src_md_, weights_md_, dst_md_, *desc(), *attr()));

             arm_compute::ActivationLayerInfo act_info;
-            CHECK(post_ops.init(engine, attr_.post_ops_, dst_md_, act_info));
+            // We are only going to create post ops if it doesn't have sum only
+            amp_.use_dst_acc = false;
+            if(!(attr_.post_ops_.len() == 1 && attr_.post_ops_.entry_[0].is_sum())) {
+                CHECK(post_ops.init(engine, attr_.post_ops_, dst_md_, act_info));
+            } else {
+                amp_.use_dst_acc = true;
+                amp_.gemm_info.set_accumulate(true);
+            }
             amp_.gemm_info.set_activation_info(act_info);
-            amp_.use_dst_acc = post_ops.has_sum();

             // Validate ACL GEMM
             ACL_CHECK_VALID(arm_compute::NEGEMM::validate(&amp_.src_tensor_info,
