diff --git a/include/ideep/operators/matmul.hpp b/include/ideep/operators/matmul.hpp
index c0f7bcd..9141644 100644
--- a/include/ideep/operators/matmul.hpp
+++ b/include/ideep/operators/matmul.hpp
@@ -3,6 +3,16 @@
 
 namespace ideep {
 
+#ifdef __aarch64__
+struct reorder_cache : utils::computation_cache<ideep::tensor> {
+  ideep::tensor reordered;
+
+  reorder_cache () {}
+
+  reorder_cache(ideep::tensor reordered_) : reordered(std::move(reordered_)) {}
+};
+#endif
+
 // Parameters for dynamic quantization
 struct matmul_forward_dyn_quant_params {
   tensor::desc src_desc; // to create src tensor
@@ -47,6 +57,14 @@ struct matmul_forward_params {
   }
 };
 
+#ifdef __aarch64__
+  static inline bool get_ideep_cache_matmul_reorders() {
+    static const char* ptr = std::getenv("IDEEP_CACHE_MATMUL_REORDERS");
+    static const bool value = ptr ? bool(std::atoi(ptr)) : false;
+    return value;
+  }
+#endif
+
 struct matmul_forward : public dnnl::matmul,
                         utils::computation_cache<dnnl::matmul::primitive_desc> {
   using super = dnnl::matmul;
@@ -1245,9 +1263,27 @@ struct matmul_forward : public dnnl::matmul,
     auto& expected_src = reorder_src ?
                          src.reorder_if_differ_in(expected_src_desc, src_attr) :
                          src;
+#ifdef __aarch64__
+    tensor expected_weights = weights;
+    if(reorder_weight) {
+      bool cache_reorders = get_ideep_cache_matmul_reorders();
+      if(cache_reorders) {
+        // Key for reorder cache
+        auto key = utils::create_key(
+          expected_weights.get_hash()
+        );
+        expected_weights = reorder_cache::fetch_or_create(key, [&]() {
+          return weights.reorder_if_differ_in(expected_wei_desc, weights_attr);
+        });
+      } else {
+        expected_weights = weights.reorder_if_differ_in(expected_wei_desc, weights_attr);
+      }
+    }
+#else
     auto& expected_weights = reorder_weight ?
                              weights.reorder_if_differ_in(expected_wei_desc, weights_attr) :
                              weights;
+#endif
     tensor scratchpad(pd.scratchpad_desc());
 
     exec_args args;
