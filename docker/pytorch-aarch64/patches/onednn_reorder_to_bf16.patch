 *******************************************************************************
 Copyright 2022 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************

diff --git a/src/cpu/aarch64/jit_uni_reorder.cpp b/src/cpu/aarch64/jit_uni_reorder.cpp
index a708da808..0522ac8a0 100644
--- a/src/cpu/aarch64/jit_uni_reorder.cpp
+++ b/src/cpu/aarch64/jit_uni_reorder.cpp
@@ -160,7 +160,7 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
 
         bool ok = true && p.ndims > 0
                 && utils::one_of(p.itype, f32, s32, data_type::s8, u8)
-                && utils::one_of(p.otype, f32, s32, data_type::s8, u8)
+                && utils::one_of(p.otype, f32, bf16, s32, data_type::s8, u8)
                 && utils::everyone_is(0, p.ioff, p.ooff) /* do we need this? */
                 && utils::one_of(p.beta, 0.f, 1.f) /* anything else? */
                 && simple_impl_desc_init(p, nullptr)
@@ -623,6 +623,9 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
                         cvt_v_s32_u8(startIdx, regNum);
                     if (idt == data_type::s8) cvt_v_s8_u8(startIdx, regNum);
                     break;
+                case bf16:
+                    if(idt == f32) cvt_v_f32_bf16(startIdx, regNum);
+                    break;
                 default: assert(!"unreachable");
             }
         };
@@ -719,7 +722,6 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
                     } while (ur < reg_unroll && count < x_tmp_vec_size);
 
                     for (int i = 0; i < count; i++) {
-
                         switch (load_step * itype_sz_) {
                             case 16:
                                 ldr(QReg(tmp_ur), ptr(x_tmp_vec[i]));
@@ -1134,7 +1136,7 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
             }
         }
 
-        for (int ur = 0; ur < reg_unroll; ur += ur_step) {
+        for (int ur = 0, count = 0; ur < reg_unroll; ur += ur_step, count += 1) {
             if (prb_.req_src_zp || prb_.req_dst_zp) {
                 const bool use_store_masks = !store_masks.empty();
                 if (use_store_masks) {
@@ -1193,7 +1195,24 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
             if (prb_.otype != f32)
                 cvt2odt(ur, 1, prb_.otype, interim_f32 ? f32 : prb_.itype);
 
-            store(o_addr(o_off[ur]), VReg(ur), ur_step * otype_sz_);
+            if(prb_.otype == bf16) {
+                if((count + 1) % 2 == 0) {
+                    // this is the second conversion so we are going to
+                    // store the result now
+                    uzp1(VReg8H(ur-ur_step), VReg8H(ur-ur_step), VReg8H(ur));
+                    store(o_addr(o_off[ur-ur_step]), VReg(ur-ur_step), ur_step * (otype_sz_ + otype_sz_));
+                } else {
+                    // this was the first conversion
+                    continue;
+                }
+            } else {
+                store(o_addr(o_off[ur]), VReg(ur), ur_step * otype_sz_);
+            }
+        }
+
+        // this is edge case when we have only one conversion
+        if (prb_.otype == bf16 && reg_unroll == ur_step) {
+            st1h(ZRegS(0), p_lsb_128, ptr(o_addr(o_off[0])));
         }
     }
 
@@ -1594,6 +1613,10 @@ struct jit_uni_reorder_kernel_f32_t : public kernel_t, public jit_generator {
         UNROLL_INST(fcvtzs, VReg4S, tmp, tmp);
     }
 
+    void cvt_v_f32_bf16(const size_t startIdx, const size_t regNum) {
+        UNROLL_INST2(bfcvt, ZRegH(i), p_lsb_128 / T_m, ZRegS(i));
+    }
+
     void cvt_z_s8_s32(const size_t startIdx, const size_t regNum) {
         cvt_z_b_s(startIdx, regNum);
         UNROLL_INST(sxtb, ZRegS, tmp, P_ALL_ONE / T_m, tmp);
diff --git a/src/cpu/reorder/cpu_reorder_regular_f32_bf16.cpp b/src/cpu/reorder/cpu_reorder_regular_f32_bf16.cpp
index ba5499ba9..975ddc1f3 100644
--- a/src/cpu/reorder/cpu_reorder_regular_f32_bf16.cpp
+++ b/src/cpu/reorder/cpu_reorder_regular_f32_bf16.cpp
@@ -34,6 +34,8 @@ const impl_list_map_t &regular_f32_bf16_impl_list_map() {
             DNNL_NON_X64_ONLY(REG_SR_BIDIR(f32, any, bf16, nChw16c))
             DNNL_NON_X64_ONLY(REG_SR_BIDIR(f32, any, bf16, nCdhw16c))
 
+            DNNL_AARCH64_ONLY(CPU_REORDER_INSTANCE(aarch64::jit_uni_reorder_t))
+
             DNNL_NON_X64_ONLY(REG_SR(f32, oihw, bf16, OIhw8i16o2i, fmt_order::keep))
             DNNL_NON_X64_ONLY(REG_SR(f32, goihw, bf16, gOIhw8i16o2i, fmt_order::keep))
             DNNL_NON_X64_ONLY(REG_SR(f32, oihw, bf16, OIhw8o16i2o, fmt_order::keep))
