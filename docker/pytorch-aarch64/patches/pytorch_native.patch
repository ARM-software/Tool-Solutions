 *******************************************************************************
 Copyright 2021-2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************

diff --git a/vision/classification_and_detection/python/backend.py b/vision/classification_and_detection/python/backend.py
index 955eddb..f607738 100755
--- a/vision/classification_and_detection/python/backend.py
+++ b/vision/classification_and_detection/python/backend.py
@@ -16,7 +16,7 @@ class Backend():
     def name(self):
         raise NotImplementedError("Backend:name")
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         raise NotImplementedError("Backend:load")
 
     def predict(self, feed):
diff --git a/vision/classification_and_detection/python/backend_null.py b/vision/classification_and_detection/python/backend_null.py
index ed58170..3cbb405 100755
--- a/vision/classification_and_detection/python/backend_null.py
+++ b/vision/classification_and_detection/python/backend_null.py
@@ -22,7 +22,7 @@ class BackendNull(backend.Backend):
     def image_format(self):
         return "NHWC"
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         self.outputs = ["output"]
         self.inputs = ["input"]
         return self
diff --git a/vision/classification_and_detection/python/backend_onnxruntime.py b/vision/classification_and_detection/python/backend_onnxruntime.py
index ea85ae0..367f098 100755
--- a/vision/classification_and_detection/python/backend_onnxruntime.py
+++ b/vision/classification_and_detection/python/backend_onnxruntime.py
@@ -24,7 +24,7 @@ class BackendOnnxruntime(backend.Backend):
         """image_format. For onnx it is always NCHW."""
         return "NCHW"
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         """Load model and find input/outputs from the model file."""
         opt = rt.SessionOptions()
         # enable level 3 optimizations
diff --git a/vision/classification_and_detection/python/backend_pytorch.py b/vision/classification_and_detection/python/backend_pytorch.py
index 02b010a..6858147 100644
--- a/vision/classification_and_detection/python/backend_pytorch.py
+++ b/vision/classification_and_detection/python/backend_pytorch.py
@@ -30,7 +30,7 @@ class BackendPytorch(backend.Backend):
     def image_format(self):
         return "NCHW"
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         self.model = onnx.load(model_path)
 
         # find inputs from the model if not passed in by config
diff --git a/vision/classification_and_detection/python/backend_pytorch_native.py b/vision/classification_and_detection/python/backend_pytorch_native.py
index a302ae0..3db1861 100755
--- a/vision/classification_and_detection/python/backend_pytorch_native.py
+++ b/vision/classification_and_detection/python/backend_pytorch_native.py
@@ -1,5 +1,5 @@
 """
-pytoch native backend 
+pytorch native backend
 """
 # pylint: disable=unused-argument,missing-docstring
 import torch  # currently supports pytorch1.0
@@ -23,8 +23,19 @@ class BackendPytorchNative(backend.Backend):
     def image_format(self):
         return "NCHW"
 
-    def load(self, model_path, inputs=None, outputs=None):
-        self.model = torch.load(model_path, map_location=lambda storage, loc: storage)
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
+        self.profile = profile
+        if profile == "resnet50-pytorch":
+            from torchvision.models.resnet import resnet50
+            self.model = resnet50(weights=None)
+            self.model.load_state_dict(torch.load(model_path,map_location=lambda storage, loc: storage))
+        elif profile == "retinanet-pytorch":
+            from torchvision.models.detection.retinanet import retinanet_resnext50_32x4d_fpn
+            self.model = retinanet_resnext50_32x4d_fpn(weights=None)
+            state_dict = torch.load(model_path,map_location=lambda storage, loc: storage)["model"]
+            self.model.load_state_dict(state_dict)
+        else:
+            self.model = torch.load(model_path,map_location=lambda storage, loc: storage)
         self.model.eval()
         # find inputs from the model if not passed in by config
         if inputs:
@@ -54,4 +65,4 @@ class BackendPytorchNative(backend.Backend):
         feed[key] = torch.tensor(feed[key]).float().to(self.device)
         with torch.no_grad():
             output = self.model(feed[key])
-        return output
+        return [output] if self.profile == "resnet50-pytorch" else output
diff --git a/vision/classification_and_detection/python/backend_tf.py b/vision/classification_and_detection/python/backend_tf.py
index ab32b56..7fd4077 100755
--- a/vision/classification_and_detection/python/backend_tf.py
+++ b/vision/classification_and_detection/python/backend_tf.py
@@ -26,7 +26,7 @@ class BackendTensorflow(backend.Backend):
         # By default tensorflow uses NHWC (and the cpu implementation only does NHWC)
         return "NHWC"
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         # there is no input/output meta data i the graph so it need to come from config.
         if not inputs:
             raise ValueError("BackendTensorflow needs inputs")
diff --git a/vision/classification_and_detection/python/backend_tflite.py b/vision/classification_and_detection/python/backend_tflite.py
index 7c8c78c..3710f91 100755
--- a/vision/classification_and_detection/python/backend_tflite.py
+++ b/vision/classification_and_detection/python/backend_tflite.py
@@ -39,7 +39,7 @@ class BackendTflite(backend.Backend):
         # tflite is always NHWC
         return "NHWC"
 
-    def load(self, model_path, inputs=None, outputs=None):
+    def load(self, model_path, profile=None, inputs=None, outputs=None):
         self.sess = tflite.Interpreter(model_path=model_path)
         self.sess.allocate_tensors()
         # keep input/output name to index mapping
diff --git a/vision/classification_and_detection/python/main.py b/vision/classification_and_detection/python/main.py
index 7b2348b..b5be5d0 100755
--- a/vision/classification_and_detection/python/main.py
+++ b/vision/classification_and_detection/python/main.py
@@ -98,8 +98,8 @@ SUPPORTED_PROFILES = {
     "resnet50-pytorch": {
         "inputs": "image",
         "outputs": "ArgMax:0",
-        "dataset": "imagenet",
-        "backend": "tensorflow",
+        "dataset": "imagenet_pytorch",
+        "backend": "pytorch-native",
         "model-name": "resnet50",
     },
     "resnet50-onnxruntime": {
@@ -473,7 +473,7 @@ def main():
                         use_cache=args.cache,
                         count=count, **kwargs)
     # load model to backend
-    model = backend.load(args.model, inputs=args.inputs, outputs=args.outputs)
+    model = backend.load(args.model, profile=args.profile, inputs=args.inputs, outputs=args.outputs)
     final_results = {
         "runtime": model.name(),
         "version": model.version(),
diff --git a/vision/classification_and_detection/run_common.sh b/vision/classification_and_detection/run_common.sh
index 8188f61..337674e 100755
--- a/vision/classification_and_detection/run_common.sh
+++ b/vision/classification_and_detection/run_common.sh
@@ -88,7 +88,6 @@ fi
 if [ $name == "resnet50-pytorch" ] ; then
     model_path="$MODEL_DIR/resnet50-19c8e357.pth"
     profile=resnet50-pytorch
-    extra_args="$extra_args --backend pytorch"
 fi
 if [ $name == "mobilenet-pytorch" ] ; then
     model_path="$MODEL_DIR/mobilenet_v1_1.0_224.onnx"
