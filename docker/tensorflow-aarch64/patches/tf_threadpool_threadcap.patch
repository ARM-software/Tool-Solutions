 *******************************************************************************
 Copyright 2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/tensorflow/tsl/platform/threadpool.cc b/tensorflow/tsl/platform/threadpool.cc
index 271aa58c804..b4abf97a1f1 100644
--- a/tensorflow/tsl/platform/threadpool.cc
+++ b/tensorflow/tsl/platform/threadpool.cc
@@ -27,6 +27,7 @@ limitations under the License.
 #include "tensorflow/tsl/platform/numa.h"
 #include "tensorflow/tsl/platform/setround.h"
 #include "tensorflow/tsl/platform/tracing.h"
+#include <thread>

 #ifdef TENSORFLOW_THREADSCALING_EXPERIMENTAL
 ABSL_FLAG(float, tensorflow_num_threads_scale_factor, 1.0,
@@ -107,6 +108,10 @@ ThreadPool::ThreadPool(Env* env, const ThreadOptions& thread_options,
                        bool low_latency_hint, Eigen::Allocator* allocator) {
   CHECK_GE(num_threads, 1);

+if(num_threads == std::thread::hardware_concurrency() && num_threads > 1){
+  num_threads = num_threads - 1;
+}
+
 #ifdef TENSORFLOW_THREADSCALING_EXPERIMENTAL
   CHECK_GT(absl::GetFlag(FLAGS_tensorflow_num_threads_scale_factor), 0);
   num_threads *= absl::GetFlag(FLAGS_tensorflow_num_threads_scale_factor);
