 *******************************************************************************
 Copyright 2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/tensorflow/core/util/mkl_threadpool.h b/tensorflow/core/util/mkl_threadpool.h
index e3bf6adc0b5..aa5a220212e 100644
--- a/tensorflow/core/util/mkl_threadpool.h
+++ b/tensorflow/core/util/mkl_threadpool.h
@@ -25,12 +25,14 @@ limitations under the License.
 #include <utility>
 #include <vector>

-#include "dnnl_threadpool.hpp"
 #include "dnnl.hpp"
+#include "dnnl_threadpool.hpp"
 #include "tensorflow/core/framework/op_kernel.h"
+#include "tensorflow/core/platform/blocking_counter.h"
 #include "tensorflow/core/platform/cpu_info.h"
 #include "tensorflow/core/platform/threadpool.h"
 #include "tensorflow/core/util/onednn_env_vars.h"
+
 #define EIGEN_USE_THREADS

 namespace tensorflow {
@@ -108,15 +110,33 @@ struct MklDnnThreadPool : public threadpool_iface {
     const bool use_caller_thread =
         ThreadPoolUseCallerThread() && nthr == port::NumSchedulableCPUs();
     const int njobs_to_schedule = use_caller_thread ? njobs - 1 : njobs;
-    for (int i = 0; i < njobs_to_schedule; i++) {
-      eigen_interface_->ScheduleWithHint(
-          [balance, i, n, njobs, fn]() { run_jobs(balance, i, n, njobs, fn); },
-          i, i + 1);
-    }
+
+    BlockingCounter counter(njobs_to_schedule);
+    std::function<void(int, int)> handle_range =
+    [=, &handle_range, &counter](int first, int last) {
+      while (last - first > 1) {
+        const auto mid = first + (last - first) / 2 ;
+          // Find something near the midpoint which is a multiple of block size.
+          eigen_interface_->ScheduleWithHint([=]() { handle_range(mid, last); }, mid, mid+1);
+          last = mid;
+      }
+      counter.DecrementCount();
+      run_jobs(balance, first, n, njobs, fn);
+    };
+
+    // Eigen avoids a thread hop by running the root of the tree on the main
+    // thread. We have disabled this because it actually slows things down
+    // relative to base because base cheats and uses n threads while letting
+    // main continue doing other work
+    eigen_interface_->ScheduleWithHint([=]() { handle_range(0, njobs_to_schedule); }, 0, 1);
+
     if (use_caller_thread) {
       run_jobs(balance, njobs - 1, n, njobs, fn);
     }
+
+    counter.Wait();
   }
+
   ~MklDnnThreadPool() {}

  private:
