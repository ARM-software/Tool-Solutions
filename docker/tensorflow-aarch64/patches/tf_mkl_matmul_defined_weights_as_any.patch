 *******************************************************************************
 Copyright 2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/tensorflow/core/kernels/mkl/mkl_batch_matmul_op.cc b/tensorflow/core/kernels/mkl/mkl_batch_matmul_op.cc
index eb3ab9fd6e1..a09a69b2e7c 100644
--- a/tensorflow/core/kernels/mkl/mkl_batch_matmul_op.cc
+++ b/tensorflow/core/kernels/mkl/mkl_batch_matmul_op.cc
@@ -171,42 +171,19 @@ class BatchMatMulMkl : public OpKernel {
 // TODO(Arm, Intel): Reach agreement on whether this block should be deleted.
 // https://github.com/tensorflow/tensorflow/pull/57987#discussion_r993731524
 #ifdef DNNL_AARCH64_USE_ACL
-    memory::format_tag weight_format;
-    switch (params->b_dims.size()) {
-      case 2:
-        weight_format =
-            adj_y_ ? memory::format_tag::ba : memory::format_tag::ab;
-        break;
-      case 3:
-        weight_format =
-            adj_y_ ? memory::format_tag::acb : memory::format_tag::abc;
-        break;
-      case 4:
-        weight_format =
-            adj_y_ ? memory::format_tag::abdc : memory::format_tag::abcd;
-        break;
-      case 5:
-        weight_format =
-            adj_y_ ? memory::format_tag::abced : memory::format_tag::abcde;
-        break;
-      default:
-        weight_format = memory::format_tag::undef;
-    }
     MklDnnData<Trhs> weights_mkl(&(this->cpu_engine_));
-    if (weight_format != memory::format_tag::undef) {
-      auto weight_md =
-          memory::desc(params->b_dims, MklDnnType<Trhs>(), weight_format);
-      std::shared_ptr<dnnl::matmul::primitive_desc> matmul_pd =
-          matmul_prim->GetPrimitiveDesc();
-      // Reorder weights if necessary.
-      // Check whether we need to do reorder.
-      if (weight_md != matmul_pd->weights_desc()) {
-        weights_mkl.SetUsrMem(weight_md, weight_data);
-        weights_mkl.CheckReorderToOpMem(matmul_pd.get()->weights_desc(),
-                                        this->cpu_engine_, ctx);
-        weight_data =
-            reinterpret_cast<Trhs*>(weights_mkl.GetOpMem().get_data_handle());
-      }
+    auto weight_md =
+        memory::desc(params->b_dims, MklDnnType<Trhs>(), params->b_strides);
+    std::shared_ptr<dnnl::matmul::primitive_desc> matmul_pd =
+        matmul_prim->GetPrimitiveDesc();
+    // Reorder weights if necessary.
+    // Check whether we need to do reorder.
+    if (weight_md != matmul_pd->weights_desc()) {
+      weights_mkl.SetUsrMem(weight_md, weight_data);
+      weights_mkl.CheckReorderToOpMem(matmul_pd.get()->weights_desc(),
+                                      this->cpu_engine_, ctx);
+      weight_data =
+          reinterpret_cast<Trhs*>(weights_mkl.GetOpMem().get_data_handle());
     }
     // Reorder src
     Tlhs* src_data = const_cast<Tlhs*>(lhs.flat<Tlhs>().data());
diff --git a/tensorflow/core/kernels/mkl/mkl_matmul_ops_common.h b/tensorflow/core/kernels/mkl/mkl_matmul_ops_common.h
index 33e2e8a646d..5fd88d4d7d4 100644
--- a/tensorflow/core/kernels/mkl/mkl_matmul_ops_common.h
+++ b/tensorflow/core/kernels/mkl/mkl_matmul_ops_common.h
@@ -260,7 +260,11 @@ class MklDnnMatMulFwdPrimitive : public MklPrimitive {
 
     context_.weight_md.reset(new memory::desc({matmul_fwd_params.weight_dims},
                                               MklDnnType<Tweight>(),
+#ifdef DNNL_AARCH64_USE_ACL
+                                              memory::format_tag::any));
+#else
                                               matmul_fwd_params.weight_format));
+#endif
 
     context_.dst_md.reset(new memory::desc({matmul_fwd_params.dst_dims},
                                            MklDnnType<Toutput>(),
@@ -818,8 +822,11 @@ class MklMatMulPrimitive : public MklPrimitive {
                                          params.a_strides));
 
     context_.b_md.reset(new memory::desc({params.b_dims}, MklDnnType<Trhs>(),
+#ifdef DNNL_AARCH64_USE_ACL
+                                         memory::format_tag::any));
+#else
                                          params.b_strides));
-
+#endif
     context_.c_md.reset(new memory::desc({params.c_dims}, MklDnnType<Toutput>(),
                                          params.c_strides));
 
@@ -873,8 +880,13 @@ class MklMatMulPrimitive : public MklPrimitive {
     // Create memory primitive based on dummy data.
     context_.a_mem.reset(
         new dnnl::memory(*context_.a_md, cpu_engine_, DummyData));
+#ifndef DNNL_AARCH64_USE_ACL
     context_.b_mem.reset(
         new dnnl::memory(*context_.b_md, cpu_engine_, DummyData));
+#else
+    context_.b_mem.reset(new dnnl::memory(
+        context_.prim_desc.get()->weights_desc(), cpu_engine_, DummyData));
+#endif
     context_.c_mem.reset(
         new dnnl::memory(*context_.c_md, cpu_engine_, DummyData));
     auto scratchpad_md = context_.prim_desc->scratchpad_desc();
