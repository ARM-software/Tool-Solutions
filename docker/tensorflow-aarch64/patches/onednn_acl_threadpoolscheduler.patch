 *******************************************************************************
 Copyright 2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/src/cpu/aarch64/acl_threadpool_scheduler.cpp b/src/cpu/aarch64/acl_threadpool_scheduler.cpp
index 418d7f30f98..439ca862e4d 100644
--- a/src/cpu/aarch64/acl_threadpool_scheduler.cpp
+++ b/src/cpu/aarch64/acl_threadpool_scheduler.cpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2022 Arm Ltd. and affiliates
+* Copyright 2022-2023 Arm Ltd. and affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -117,14 +117,14 @@ void ThreadpoolScheduler::run_workloads(
     if (is_async) b.init(num_threads);
     tp->parallel_for(num_threads, [&](int ithr, int nthr) {
         bool is_main = get_active_threadpool() == tp;
-        if (is_main) activate_threadpool(tp);
+        if (!is_main) activate_threadpool(tp);
         // Make ThreadInfo local to avoid race conditions
         ThreadInfo info;
         info.cpu_info = &cpu_info();
         info.num_threads = nthr;
         info.thread_id = ithr;
         process_workloads(workloads, feeder, info);
-        if (is_main) deactivate_threadpool();
+        if (!is_main) deactivate_threadpool();
         if (is_async) b.notify();
     });
     if (is_async) b.wait();
