 *******************************************************************************
 Copyright 2021-2022 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/delegate/cmake/Modules/FindTfLite.cmake b/delegate/cmake/Modules/FindTfLite.cmake
index 907c3847c..b22772c92 100644
--- a/delegate/cmake/Modules/FindTfLite.cmake
+++ b/delegate/cmake/Modules/FindTfLite.cmake
@@ -28,18 +28,26 @@ if (TfLite_LIB MATCHES .a$)
                  PATH ${TFLITE_LIB_ROOT}/_deps/farmhash-build)
     find_library(TfLite_fftsg_LIB "libfft2d_fftsg.a"
                  PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
+    find_library(TfLite_xnnpack_LIB "libXNNPACK.a"
+                 PATH ${TFLITE_LIB_ROOT}/_deps/xnnpack-build)
     find_library(TfLite_fftsg2d_LIB "libfft2d_fftsg2d.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
+                PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
     find_library(TfLite_ruy_LIB "libruy.a" PATH
                  ${TFLITE_LIB_ROOT}/_deps/ruy-build)
     find_library(TfLite_flatbuffers_LIB "libflatbuffers.a"
                  PATH ${TFLITE_LIB_ROOT}/_deps/flatbuffers-build)
+    find_library(TfLite_pthreadpool_LIB "libpthreadpool.a"
+                 PATH ${TFLITE_LIB_ROOT}/pthreadpool)
+    find_library(TfLite_cpuinfo_LIB "libcpuinfo.a"
+                 PATH ${TFLITE_LIB_ROOT}/_deps/cpuinfo-build)
+    find_library(TfLite_clog_LIB "libclog.a"
+                 PATH ${TFLITE_LIB_ROOT}/_deps/clog-build)
 
     ## Set TFLITE_FOUND if all libraries are satisfied for static lib
-    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_ruy_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB TfLite_farmhash_LIB TfLite_flatbuffers_LIB)
+    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_xnnpack_LIB TfLite_ruy_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB TfLite_farmhash_LIB TfLite_flatbuffers_LIB TfLite_pthreadpool_LIB TfLite_cpuinfo_LIB TfLite_clog_LIB)
     # Set external variables for usage in CMakeLists.txt
     if (TFLITE_FOUND)
-        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_ruy_LIB} ${TfLite_fftsg_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_farmhash_LIB} ${TfLite_flatbuffers_LIB})
+        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_xnnpack_LIB} ${TfLite_fftsg_LIB} ${TfLite_ruy_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_farmhash_LIB} ${TfLite_flatbuffers_LIB} ${TfLite_pthreadpool_LIB} ${TfLite_cpuinfo_LIB} ${TfLite_clog_LIB})
     endif ()
 elseif (TfLite_LIB MATCHES .so$)
     message("-- Dynamic tensorflow lite library found, using for ArmNN build")
diff --git a/src/backends/neon/NeonWorkloadFactory.cpp b/src/backends/neon/NeonWorkloadFactory.cpp
index 19d322b75..b09dbc4be 100644
--- a/src/backends/neon/NeonWorkloadFactory.cpp
+++ b/src/backends/neon/NeonWorkloadFactory.cpp
@@ -58,6 +58,7 @@ void NeonWorkloadFactory::SetNumberOfThreads()
         const unsigned int MIN_THREADS = 1;
         const unsigned int MAX_THREADS = 64;

+        static std::once_flag flag_once;
         // Set the number of threads to be used if the user has set NumberOfThreads param
         // Only set if within limit or valid input
         auto modelOptions = dynamic_cast<NeonBackendModelContext*>(m_ModelContextPtr.get());
@@ -65,7 +66,10 @@ void NeonWorkloadFactory::SetNumberOfThreads()

         if (numberOfThreads != 0 && numberOfThreads >= MIN_THREADS && numberOfThreads <= MAX_THREADS)
         {
-            arm_compute::Scheduler::get().set_num_threads(numberOfThreads);
+
+            std::call_once(flag_once, [&]() {
+                arm_compute::Scheduler::get().set_num_threads(numberOfThreads);
+            });
         }
     }
 }

