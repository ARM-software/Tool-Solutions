*******************************************************************************
 Copyright 2021-2023 Arm Limited and affiliates.
 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *******************************************************************************
diff --git a/cmake/GlobalConfig.cmake b/cmake/GlobalConfig.cmake
index 2d97899ce..937c214cb 100644
--- a/cmake/GlobalConfig.cmake
+++ b/cmake/GlobalConfig.cmake
@@ -101,7 +101,7 @@ endif()
 # Compiler flags that are always set
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 if(COMPILER_IS_GNU_LIKE)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Werror -Wold-style-cast -Wno-missing-braces -Wconversion -Wsign-conversion")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Wno-error -Wold-style-cast -Wno-missing-braces -Wconversion -Wsign-conversion -fopenmp")
     if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-psabi")
     endif()
diff --git a/delegate/CMakeLists.txt b/delegate/CMakeLists.txt
index 055ffce1c..7676eaf84 100644
--- a/delegate/CMakeLists.txt
+++ b/delegate/CMakeLists.txt
@@ -7,7 +7,7 @@ cmake_minimum_required (VERSION 3.7.0)
 project(armnnDelegate)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Werror -Wold-style-cast -Wno-missing-braces -Wconversion -Wsign-conversion -Wno-comment")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Wno-error -Wold-style-cast -Wno-missing-braces -Wconversion -Wsign-conversion -Wno-comment")
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/Modules/")
 
 option(BUILD_UNIT_TESTS "Build unit tests" ON)
@@ -441,4 +441,4 @@ if(BUILD_OPAQUE_DELEGATE)
     add_library(ArmnnDelegate::ArmnnOpaqueDelegate ALIAS armnnOpaqueDelegate)
 endif()
 
-####################################################
\ No newline at end of file
+####################################################
diff --git a/delegate/cmake/Modules/FindTfLite.cmake b/delegate/cmake/Modules/FindTfLite.cmake
index 634aaea51..7d9939045 100644
--- a/delegate/cmake/Modules/FindTfLite.cmake
+++ b/delegate/cmake/Modules/FindTfLite.cmake
@@ -34,10 +34,12 @@ if (TfLite_LIB MATCHES .a$)
                  PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
     find_library(TfLite_fftsg2d_LIB "libfft2d_fftsg2d.a"
                  PATH ${TFLITE_LIB_ROOT}/_deps/fft2d-build)
-    find_library(TfLite_flatbuffers_LIB "libflatbuffers.a"
-                 PATH ${TFLITE_LIB_ROOT}/_deps/flatbuffers-build)
+    find_library(TfLite_xnnpack_LIB "libXNNPACK.a"
+                 PATH ${TFLITE_LIB_ROOT}/_deps/xnnpack-build)
     find_library(TfLite_cpuinfo_LIB "libcpuinfo.a" PATH
                  ${TFLITE_LIB_ROOT}/_deps/cpuinfo-build)
+    find_library(TfLite_flatbuffers_LIB "libflatbuffers.a" PATH
+                 ${TFLITE_LIB_ROOT}/_deps/flatbuffers-build)
 
     # All remaining libraries are part of libruy.
     find_library(TfLite_ruy_allocator_LIB "libruy_allocator.a" PATH
@@ -102,7 +104,7 @@ if (TfLite_LIB MATCHES .a$)
                 ${TFLITE_LIB_ROOT}/pthreadpool)
 
     ## Set TFLITE_FOUND if all libraries are satisfied for static lib
-    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_farmhash_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB
+    find_package_handle_standard_args(TfLite DEFAULT_MSG TfLite_LIB TfLite_abseilstrings_LIB TfLite_farmhash_LIB TfLite_fftsg_LIB TfLite_fftsg2d_LIB TfLite_xnnpack_LIB
                                       TfLite_flatbuffers_LIB TfLite_ruy_allocator_LIB TfLite_ruy_apply_multiplier_LIB TfLite_ruy_blocking_counter_LIB
                                       TfLite_ruy_block_map_LIB TfLite_ruy_context_LIB TfLite_ruy_context_get_ctx_LIB TfLite_ruy_cpuinfo_LIB
                                       TfLite_ruy_ctx_LIB TfLite_ruy_denormal_LIB TfLite_ruy_frontend_LIB TfLite_ruy_have_built_path_for_avx2_fma_LIB
@@ -116,8 +118,8 @@ if (TfLite_LIB MATCHES .a$)
     if (TFLITE_FOUND)
         # WARNING! The order of these libraries is critical. Moving them
         # around will result in linker errors in DelegateUnitTests.
-        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_farmhash_LIB} ${TfLite_fftsg_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_flatbuffers_LIB}
-                                     ${TfLite_ruy_allocator_LIB} ${TfLite_ruy_apply_multiplier_LIB} ${TfLite_ruy_frontend_LIB} ${TfLite_ruy_trmul_LIB}
+        set(TfLite_LIB ${TfLite_LIB} ${TfLite_abseilstrings_LIB} ${TfLite_farmhash_LIB} ${TfLite_fftsg_LIB} ${TfLite_fftsg2d_LIB} ${TfLite_xnnpack_LIB} ${TfLite_flatbuffers_LIB}
+                                     ${TfLite_pthreadpool_LIB} ${TfLite_ruy_allocator_LIB} ${TfLite_ruy_apply_multiplier_LIB} ${TfLite_ruy_frontend_LIB} ${TfLite_ruy_trmul_LIB}
                                      ${TfLite_ruy_threadpool_LIB} ${TfLite_ruy_blocking_counter_LIB} ${TfLite_ruy_block_map_LIB} ${TfLite_ruy_context_LIB}
                                      ${TfLite_ruy_context_get_ctx_LIB} ${TfLite_ruy_cpuinfo_LIB} ${TfLite_ruy_ctx_LIB} ${TfLite_ruy_denormal_LIB}
                                      ${TfLite_ruy_have_built_path_for_avx2_fma_LIB} ${TfLite_ruy_have_built_path_for_avx512_LIB}
diff --git a/src/armnnTfLiteParser/TfLiteParser.cpp b/src/armnnTfLiteParser/TfLiteParser.cpp
index 244f1fa19..2e44ceebb 100644
--- a/src/armnnTfLiteParser/TfLiteParser.cpp
+++ b/src/armnnTfLiteParser/TfLiteParser.cpp
@@ -4820,6 +4820,7 @@ TfLiteParserImpl::ModelPtr TfLiteParserImpl::LoadModelFromBinary(const uint8_t*
         throw InvalidArgumentException(fmt::format("Invalid (null) binary content {}",
                                        CHECK_LOCATION().AsString()));
      }
+#if 0 // do not verify flat buffer
     flatbuffers::Verifier verifier(binaryContent, len);
     if (verifier.VerifyBuffer<tflite::Model>() == false)
     {
@@ -4829,6 +4830,7 @@ TfLiteParserImpl::ModelPtr TfLiteParserImpl::LoadModelFromBinary(const uint8_t*
                         len,
                         CHECK_LOCATION().AsString()));
     }
+#endif
     return tflite::UnPackModel(binaryContent);
 }
 
